# Pastry environment variables
# Copy to .env.local and adjust.

# Toggle to require an admin password for ALL uploads (true|false)
PASTRY_ADMIN_ONLY_UPLOADS=false

# Require every uploaded file to have a download password (true|false)
PASTRY_REQUIRE_FILE_PASSWORDS=false

# Admin password (required if PASTRY_ADMIN_ONLY_UPLOADS=true)
PASTRY_ADMIN_PASSWORD="change-me"

# JWT secret for issuing short-lived admin session tokens
PASTRY_JWT_SECRET="dev-secret-change"

# Optional Mongo connection string; if present and valid, overrides sqlite storage for metadata
MONGODB_URI=""

# Directory (relative or absolute) where file blobs are stored (must be writable)
PASTRY_STORAGE_DIR="./storage"

# Maximum file size in bytes (e.g. 52428800 = 50MB)
PASTRY_MAX_FILE_SIZE=52428800

# Allowed mime type regex (blank to allow all) â€“ example: ^(image/|text/|application/pdf$)
PASTRY_ALLOWED_MIME_REGEX=""

# Optional bearer token to protect /api/cleanup endpoint (recommended in production)
PASTRY_CLEANUP_TOKEN="change-cleanup-token"

# By default a background scheduler runs every minute to purge expired / exhausted files.
# Set to true ONLY if you want to disable that automatic cleanup (not recommended).
PASTRY_DISABLE_SCHEDULER=false

# Override the default cleanup interval (milliseconds). Default is 60000 (60s).
# Lower values are useful for tests/demos; keep >=30000 in production.
PASTRY_SCHEDULER_INTERVAL_MS=60000

# Force the scheduler to run even if other logic (e.g. test heuristics) would disable it.
# Useful in CI integration tests. Force overrides disable.
PASTRY_FORCE_SCHEDULER=false

# Upload rate limit (max uploads per window) and window size (ms)
PASTRY_UPLOAD_RATE_LIMIT=30
PASTRY_UPLOAD_RATE_WINDOW_MS=60000

# Download rate limit and window (per IP)
PASTRY_DOWNLOAD_RATE_LIMIT=30
PASTRY_DOWNLOAD_RATE_WINDOW_MS=60000

# Hide enumeration clues on download failures (return 404 for protected cases)
PASTRY_DOWNLOAD_ENUM_HIDE=false

# Log level: silent | error | warn | info | debug
PASTRY_LOG_LEVEL=info

# If false (default) records whose max downloads is exceeded keep their DB row (blob deleted only)
# If true we purge both blob and DB row immediately when max downloads reached
CLEANUP_PURGE_DOWNLOADS_EXCEEDED=false
